import { Plugin } from "vite";
import { promisify } from 'util'
const { invoke } = require('eslint_d/lib/linter');
const invokePromise = promisify(invoke);

export function codeGeneratorYasmlPlugin(options: any): Plugin {
  return {
    name: "codegen-yasml",
    enforce: "pre",
    async transform(code, id, options) {
      if (
        (!id.includes("node_modules") && id.endsWith(".ts")) ||
        id.endsWith(".tsx")
      ) {
        if (code.includes("useGlobalState")) {
          const result = await invokePromise(process.cwd(), [
            "--no-eslintrc",
            "--parser",
            "@typescript-eslint/parser",
            "--plugin",
            "@thirtytech/yasml",
            "--parser-options",
            "project:true",
            "--rule",
            "@thirtytech/yasml/match-export-parameters:1",
            "--stdin",
            "--fix-to-stdout",
            "--stdin-filename",
            id,
          ], code);
          code = result;
        }
      }
      return code;
    },
    // async load(id) {
    //   if (
    //     (!id.includes("node_modules") && id.endsWith(".ts")) ||
    //     id.endsWith(".tsx")
    //   ) {
    //     console.log("Loading", id);
    //     const filePath = id;
    //     let fileData = await fs.readFile(filePath, "utf8");
    //     if (fileData.includes("useGlobalState")) {
    //       fileData = `// Generated by codegen-yasml
    //       ${fileData}
    //       `;
    //     }
    //     return fileData;
    //     // Read file from filePath and add comment to top line then return
    //     // the modified file contents.
    //   }
    //   return;
    // },
  };
}
